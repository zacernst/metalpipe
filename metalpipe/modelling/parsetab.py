# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "A AN AND AS AT BY COMMA COREFER CSV DATA DOT DOWN ENTITY FILE FROM FUNCTION GO HAS IMPORTED IN IS JSON KEY LABEL LOCAL LPAREN NAMED NOT OF OR PROPERTY PYTHON QUERY RELATED RPAREN SELECT SEMICOLON SOURCE START TO TOP UNIQUE UNTIL UP\n    multi_statement : statement SEMICOLON\n                    | multi_statement statement SEMICOLON\n    statement : condition\n                 | selection_list\n                 | traversal\n                 | select_clause\n                 | property_assertion\n                 | relationship_assertion\n                 | select_head\n                 | function_application\n                 | coreference_assertion\n                 | function_definition\n                 | query_definition\n    traversal : START AT condition\n                 | GO DOWN UNTIL condition\n                 | GO UP UNTIL condition\n                 | traversal AS LABEL\n    traversal_chain : traversal\n                       | traversal_chain traversal\n    condition : LPAREN condition AND condition RPAREN\n                 | LPAREN condition OR condition RPAREN\n                 | NOT condition\n                 | TOP\n                 | HAS KEY LABEL\n     keypath : LABEL\n                | keypath DOT LABEL\n     select_head : SELECT selection_list FROM LABEL\n     select_clause : select_head traversal_chain query_definition : QUERY LABEL IS select_clause\n    query_reference : IN QUERY LABEL\n    \n    property_assertion : query_reference LABEL IS A PROPERTY LABEL OF ENTITY LABEL NAMED BY LABEL\n                       | query_reference LABEL IS A UNIQUE PROPERTY LABEL OF ENTITY LABEL\n    \n    coreference_assertion : query_reference LABEL AND LABEL COREFER\n    \n    relationship_assertion : query_reference LABEL NAMED BY LABEL IS RELATED TO LABEL NAMED BY LABEL AS LABEL\n    \n    pathname : LABEL\n             | pathname DOT LABEL\n    \n    function_definition : LABEL IS A PYTHON FUNCTION IMPORTED FROM pathname\n    \n    function_arguments : keypath\n                       | function_application\n                       | function_arguments COMMA function_arguments\n    \n    function_application : LABEL LPAREN function_arguments RPAREN\n    \n    selection_list : function_application AS LABEL\n                   | keypath AS LABEL\n                   | selection_list COMMA function_application AS LABEL\n                   | selection_list COMMA keypath AS LABEL\n    "

_lr_action_items = {
    "LPAREN": (
        [0, 1, 14, 15, 18, 27, 40, 45, 49, 55, 56, 58, 66, 67],
        [14, 14, 14, 14, 36, -1, 14, 36, -2, 14, 14, 36, 14, 14],
    ),
    "NOT": (
        [0, 1, 14, 15, 27, 40, 49, 55, 56, 66, 67],
        [15, 15, 15, 15, -1, 15, -2, 15, 15, 15, 15],
    ),
    "TOP": (
        [0, 1, 14, 15, 27, 40, 49, 55, 56, 66, 67],
        [16, 16, 16, 16, -1, 16, -2, 16, 16, 16, 16],
    ),
    "HAS": (
        [0, 1, 14, 15, 27, 40, 49, 55, 56, 66, 67],
        [17, 17, 17, 17, -1, 17, -2, 17, 17, 17, 17],
    ),
    "START": (
        [0, 1, 9, 16, 27, 30, 31, 34, 49, 52, 53, 57, 65, 81, 82, 86, 88, 91, 92,],
        [
            20,
            20,
            20,
            -23,
            -1,
            20,
            -18,
            -22,
            -2,
            -17,
            -19,
            -24,
            -14,
            -15,
            -16,
            -27,
            20,
            -20,
            -21,
        ],
    ),
    "GO": (
        [0, 1, 9, 16, 27, 30, 31, 34, 49, 52, 53, 57, 65, 81, 82, 86, 88, 91, 92,],
        [
            21,
            21,
            21,
            -23,
            -1,
            21,
            -18,
            -22,
            -2,
            -17,
            -19,
            -24,
            -14,
            -15,
            -16,
            -27,
            21,
            -20,
            -21,
        ],
    ),
    "SELECT": ([0, 1, 27, 49, 72], [23, 23, -1, -2, 23]),
    "LABEL": (
        [
            0,
            1,
            22,
            23,
            24,
            27,
            28,
            29,
            32,
            35,
            36,
            38,
            39,
            48,
            49,
            70,
            71,
            73,
            74,
            75,
            79,
            84,
            95,
            101,
            103,
            109,
            111,
            112,
            114,
            120,
            121,
            124,
        ],
        [
            18,
            18,
            43,
            45,
            47,
            -1,
            45,
            52,
            54,
            57,
            58,
            63,
            64,
            73,
            -2,
            85,
            86,
            -30,
            89,
            90,
            58,
            97,
            100,
            105,
            107,
            113,
            115,
            116,
            118,
            122,
            123,
            125,
        ],
    ),
    "QUERY": ([0, 1, 25, 27, 49], [24, 24, 48, -1, -2]),
    "IN": ([0, 1, 27, 49], [25, 25, -1, -2]),
    "$end": ([1, 27, 49], [0, -1, -2]),
    "SEMICOLON": (
        [
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            16,
            26,
            30,
            31,
            34,
            52,
            53,
            54,
            57,
            63,
            65,
            78,
            81,
            82,
            86,
            87,
            89,
            90,
            91,
            92,
            98,
            107,
            108,
            116,
            118,
            122,
            125,
        ],
        [
            27,
            -3,
            -4,
            -5,
            -6,
            -7,
            -8,
            -9,
            -10,
            -11,
            -12,
            -13,
            -23,
            49,
            -28,
            -18,
            -22,
            -17,
            -19,
            -42,
            -24,
            -43,
            -14,
            -41,
            -15,
            -16,
            -27,
            -29,
            -44,
            -45,
            -20,
            -21,
            -33,
            -35,
            -37,
            -36,
            -32,
            -31,
            -34,
        ],
    ),
    "COMMA": (
        [4, 44, 54, 58, 59, 60, 61, 63, 64, 78, 89, 90, 93],
        [28, 28, -42, -25, 79, -38, -39, -43, -26, -41, -44, -45, 79],
    ),
    "AS": (
        [
            5,
            10,
            16,
            18,
            19,
            31,
            34,
            45,
            46,
            50,
            51,
            52,
            53,
            57,
            64,
            65,
            78,
            81,
            82,
            91,
            92,
            123,
        ],
        [
            29,
            32,
            -23,
            -25,
            38,
            29,
            -22,
            -25,
            32,
            74,
            75,
            -17,
            29,
            -24,
            -26,
            -14,
            -41,
            -15,
            -16,
            -20,
            -21,
            124,
        ],
    ),
    "AND": ([16, 33, 34, 43, 57, 91, 92], [-23, 55, -22, 70, -24, -20, -21]),
    "OR": ([16, 33, 34, 57, 91, 92], [-23, 56, -22, -24, -20, -21]),
    "RPAREN": (
        [16, 34, 57, 58, 59, 60, 61, 64, 76, 77, 78, 91, 92, 93],
        [-23, -22, -24, -25, 78, -38, -39, -26, 91, 92, -41, -20, -21, -40],
    ),
    "KEY": ([17], [35]),
    "IS": ([18, 43, 47, 97], [37, 68, 72, 102]),
    "DOT": (
        [18, 19, 45, 51, 58, 60, 64, 107, 108, 116],
        [-25, 39, -25, 39, -25, 39, -26, -35, 112, -36],
    ),
    "AT": ([20], [40]),
    "DOWN": ([21], [41]),
    "UP": ([21], [42]),
    "A": ([37, 68], [62, 83]),
    "UNTIL": ([41, 42], [66, 67]),
    "NAMED": ([43, 113, 115], [69, 117, 119]),
    "FROM": ([44, 54, 63, 89, 90, 99], [71, -42, -43, -44, -45, 103]),
    "PYTHON": ([62], [80]),
    "BY": ([69, 117, 119], [84, 120, 121]),
    "FUNCTION": ([80], [94]),
    "PROPERTY": ([83, 96], [95, 101]),
    "UNIQUE": ([83], [96]),
    "COREFER": ([85], [98]),
    "IMPORTED": ([94], [99]),
    "OF": ([100, 105], [104, 110]),
    "RELATED": ([102], [106]),
    "ENTITY": ([104, 110], [109, 114]),
    "TO": ([106], [111]),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "multi_statement": ([0], [1]),
    "statement": ([0, 1], [2, 26]),
    "condition": (
        [0, 1, 14, 15, 40, 55, 56, 66, 67],
        [3, 3, 33, 34, 65, 76, 77, 81, 82],
    ),
    "selection_list": ([0, 1, 23], [4, 4, 44]),
    "traversal": ([0, 1, 9, 30, 88], [5, 5, 31, 53, 31]),
    "select_clause": ([0, 1, 72], [6, 6, 87]),
    "property_assertion": ([0, 1], [7, 7]),
    "relationship_assertion": ([0, 1], [8, 8]),
    "select_head": ([0, 1, 72], [9, 9, 88]),
    "function_application": ([0, 1, 23, 28, 36, 79], [10, 10, 46, 50, 61, 61]),
    "coreference_assertion": ([0, 1], [11, 11]),
    "function_definition": ([0, 1], [12, 12]),
    "query_definition": ([0, 1], [13, 13]),
    "keypath": ([0, 1, 23, 28, 36, 79], [19, 19, 19, 51, 60, 60]),
    "query_reference": ([0, 1], [22, 22]),
    "traversal_chain": ([9, 88], [30, 30]),
    "function_arguments": ([36, 79], [59, 93]),
    "pathname": ([103], [108]),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> multi_statement", "S'", 1, None, None, None),
    (
        "multi_statement -> statement SEMICOLON",
        "multi_statement",
        2,
        "p_multi_statement",
        "treehorn_yaccer.py",
        31,
    ),
    (
        "multi_statement -> multi_statement statement SEMICOLON",
        "multi_statement",
        3,
        "p_multi_statement",
        "treehorn_yaccer.py",
        32,
    ),
    ("statement -> condition", "statement", 1, "p_root", "treehorn_yaccer.py", 45,),
    (
        "statement -> selection_list",
        "statement",
        1,
        "p_root",
        "treehorn_yaccer.py",
        46,
    ),
    ("statement -> traversal", "statement", 1, "p_root", "treehorn_yaccer.py", 47,),
    ("statement -> select_clause", "statement", 1, "p_root", "treehorn_yaccer.py", 48,),
    (
        "statement -> property_assertion",
        "statement",
        1,
        "p_root",
        "treehorn_yaccer.py",
        49,
    ),
    (
        "statement -> relationship_assertion",
        "statement",
        1,
        "p_root",
        "treehorn_yaccer.py",
        50,
    ),
    ("statement -> select_head", "statement", 1, "p_root", "treehorn_yaccer.py", 51,),
    (
        "statement -> function_application",
        "statement",
        1,
        "p_root",
        "treehorn_yaccer.py",
        52,
    ),
    (
        "statement -> coreference_assertion",
        "statement",
        1,
        "p_root",
        "treehorn_yaccer.py",
        53,
    ),
    (
        "statement -> function_definition",
        "statement",
        1,
        "p_root",
        "treehorn_yaccer.py",
        54,
    ),
    (
        "statement -> query_definition",
        "statement",
        1,
        "p_root",
        "treehorn_yaccer.py",
        55,
    ),
    (
        "traversal -> START AT condition",
        "traversal",
        3,
        "p_traversal",
        "treehorn_yaccer.py",
        63,
    ),
    (
        "traversal -> GO DOWN UNTIL condition",
        "traversal",
        4,
        "p_traversal",
        "treehorn_yaccer.py",
        64,
    ),
    (
        "traversal -> GO UP UNTIL condition",
        "traversal",
        4,
        "p_traversal",
        "treehorn_yaccer.py",
        65,
    ),
    (
        "traversal -> traversal AS LABEL",
        "traversal",
        3,
        "p_traversal",
        "treehorn_yaccer.py",
        66,
    ),
    (
        "traversal_chain -> traversal",
        "traversal_chain",
        1,
        "p_traversal_chain",
        "treehorn_yaccer.py",
        100,
    ),
    (
        "traversal_chain -> traversal_chain traversal",
        "traversal_chain",
        2,
        "p_traversal_chain",
        "treehorn_yaccer.py",
        101,
    ),
    (
        "condition -> LPAREN condition AND condition RPAREN",
        "condition",
        5,
        "p_condition",
        "treehorn_yaccer.py",
        113,
    ),
    (
        "condition -> LPAREN condition OR condition RPAREN",
        "condition",
        5,
        "p_condition",
        "treehorn_yaccer.py",
        114,
    ),
    (
        "condition -> NOT condition",
        "condition",
        2,
        "p_condition",
        "treehorn_yaccer.py",
        115,
    ),
    ("condition -> TOP", "condition", 1, "p_condition", "treehorn_yaccer.py", 116,),
    (
        "condition -> HAS KEY LABEL",
        "condition",
        3,
        "p_condition",
        "treehorn_yaccer.py",
        117,
    ),
    ("keypath -> LABEL", "keypath", 1, "p_keypath", "treehorn_yaccer.py", 134),
    (
        "keypath -> keypath DOT LABEL",
        "keypath",
        3,
        "p_keypath",
        "treehorn_yaccer.py",
        135,
    ),
    (
        "select_head -> SELECT selection_list FROM LABEL",
        "select_head",
        4,
        "p_select_head",
        "treehorn_yaccer.py",
        185,
    ),
    (
        "select_clause -> select_head traversal_chain",
        "select_clause",
        2,
        "p_select_clause",
        "treehorn_yaccer.py",
        204,
    ),
    (
        "query_definition -> QUERY LABEL IS select_clause",
        "query_definition",
        4,
        "p_query_definition",
        "treehorn_yaccer.py",
        209,
    ),
    (
        "query_reference -> IN QUERY LABEL",
        "query_reference",
        3,
        "p_query_reference",
        "treehorn_yaccer.py",
        251,
    ),
    (
        "property_assertion -> query_reference LABEL IS A PROPERTY LABEL OF ENTITY LABEL NAMED BY LABEL",
        "property_assertion",
        12,
        "p_property_assertion",
        "treehorn_yaccer.py",
        258,
    ),
    (
        "property_assertion -> query_reference LABEL IS A UNIQUE PROPERTY LABEL OF ENTITY LABEL",
        "property_assertion",
        10,
        "p_property_assertion",
        "treehorn_yaccer.py",
        259,
    ),
    (
        "coreference_assertion -> query_reference LABEL AND LABEL COREFER",
        "coreference_assertion",
        5,
        "p_coreference_assertion",
        "treehorn_yaccer.py",
        321,
    ),
    (
        "relationship_assertion -> query_reference LABEL NAMED BY LABEL IS RELATED TO LABEL NAMED BY LABEL AS LABEL",
        "relationship_assertion",
        14,
        "p_relationship_assertion",
        "treehorn_yaccer.py",
        342,
    ),
    ("pathname -> LABEL", "pathname", 1, "p_pathname", "treehorn_yaccer.py", 362,),
    (
        "pathname -> pathname DOT LABEL",
        "pathname",
        3,
        "p_pathname",
        "treehorn_yaccer.py",
        363,
    ),
    (
        "function_definition -> LABEL IS A PYTHON FUNCTION IMPORTED FROM pathname",
        "function_definition",
        8,
        "p_function_definition",
        "treehorn_yaccer.py",
        394,
    ),
    (
        "function_arguments -> keypath",
        "function_arguments",
        1,
        "p_function_arguments",
        "treehorn_yaccer.py",
        442,
    ),
    (
        "function_arguments -> function_application",
        "function_arguments",
        1,
        "p_function_arguments",
        "treehorn_yaccer.py",
        443,
    ),
    (
        "function_arguments -> function_arguments COMMA function_arguments",
        "function_arguments",
        3,
        "p_function_arguments",
        "treehorn_yaccer.py",
        444,
    ),
    (
        "function_application -> LABEL LPAREN function_arguments RPAREN",
        "function_application",
        4,
        "p_function_application",
        "treehorn_yaccer.py",
        471,
    ),
    (
        "selection_list -> function_application AS LABEL",
        "selection_list",
        3,
        "p_selection_list",
        "treehorn_yaccer.py",
        484,
    ),
    (
        "selection_list -> keypath AS LABEL",
        "selection_list",
        3,
        "p_selection_list",
        "treehorn_yaccer.py",
        485,
    ),
    (
        "selection_list -> selection_list COMMA function_application AS LABEL",
        "selection_list",
        5,
        "p_selection_list",
        "treehorn_yaccer.py",
        486,
    ),
    (
        "selection_list -> selection_list COMMA keypath AS LABEL",
        "selection_list",
        5,
        "p_selection_list",
        "treehorn_yaccer.py",
        487,
    ),
]
